#!/usr/bin/env bash
set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(cd "${SCRIPT_DIR}/.." && pwd)"
OUTPUT_FILE="${REPO_ROOT}/landingzone.subscription.auto.tfvars"

print_usage() {
  cat <<USAGE
Usage: $(basename "$0") [subscription-id]

Populates landingzone.subscription.auto.tfvars with the Azure subscription ID
Terraform should use. When no subscription ID is supplied, the script attempts
to read the currently selected subscription from the Azure CLI profile.

Examples:
  # Use the current Azure CLI subscription
  $ $(basename "$0")

  # Write an explicit subscription ID without relying on Azure CLI context
  $ $(basename "$0") 06bfa713-9d6d-44a9-8643-b39e003e136b
USAGE
}

log() {
  printf '%s\n' "$1"
}

fail() {
  printf 'Error: %s\n' "$1" >&2
  exit 1
}

cleanup_id() {
  echo "$1" | tr -d '\r\n\t ' | tr 'A-Z' 'a-z'
}

validate_id() {
  [[ "$1" =~ ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ ]]
}

subscription_id="${1:-}" || true

if [[ "${subscription_id}" == "--help" || "${subscription_id}" == "-h" ]]; then
  print_usage
  exit 0
fi

if [[ -z "${subscription_id}" ]]; then
  if ! command -v az >/dev/null 2>&1; then
    fail "Azure CLI (az) not found. Install Azure CLI or pass the subscription ID as an argument."
  fi

  if ! subscription_id=$(az account show --query id -o tsv 2>/dev/null); then
    fail "Unable to determine the Azure subscription. Run 'az login' and optionally 'az account set --subscription <id>' first, or provide the subscription ID explicitly."
  fi
fi

subscription_id="$(cleanup_id "${subscription_id}")"

if [[ -z "${subscription_id}" ]]; then
  fail "Subscription ID is empty after trimming."
fi

if ! validate_id "${subscription_id}"; then
  fail "Subscription ID '${subscription_id}' is not a valid GUID."
fi

timestamp="$(date -u '+%Y-%m-%dT%H:%M:%SZ')"
cat >"${OUTPUT_FILE}" <<FILE
# Generated by scripts/configure-subscription.sh on ${timestamp}
# This file is intentionally git-ignored. Re-run the script when the subscription changes.
subscription_id = "${subscription_id}"
FILE

log "Wrote subscription ID '${subscription_id}' to ${OUTPUT_FILE}"
