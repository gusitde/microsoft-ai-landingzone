[CmdletBinding()]
param(
    [Parameter(Position = 0)]
    [string]
    $SubscriptionId
)

$ErrorActionPreference = 'Stop'

function Write-Info {
    param([string]$Message)
    Write-Host $Message
}

function Throw-Error {
    param([string]$Message)
    throw $Message
}

function Normalize-SubscriptionId {
    param([string]$Value)
    return ($Value -replace '[\s\t\r\n]', '').ToLowerInvariant()
}

function Validate-SubscriptionId {
    param([string]$Value)
    return $Value -match '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
}

if (-not $SubscriptionId) {
    if (-not (Get-Command az -ErrorAction SilentlyContinue)) {
        Throw-Error 'Azure CLI (az) not found. Install Azure CLI or pass the subscription ID as the first argument.'
    }

    try {
        $SubscriptionId = az account show --query id -o tsv 2>$null
    }
    catch {
        Throw-Error "Failed to retrieve the subscription from Azure CLI. Run 'az login' and optionally 'az account set --subscription <id>', or pass the subscription explicitly."
    }
}

$SubscriptionId = Normalize-SubscriptionId -Value $SubscriptionId

if (-not $SubscriptionId) {
    Throw-Error 'Subscription ID is empty after trimming. Provide a valid GUID.'
}

if (-not (Validate-SubscriptionId -Value $SubscriptionId)) {
    Throw-Error "Subscription ID '$SubscriptionId' is not a valid GUID."
}

$RepoRoot = Resolve-Path -Path (Join-Path $PSScriptRoot '..')
$OutputFile = Join-Path $RepoRoot 'landingzone.subscription.auto.tfvars'
$Timestamp = (Get-Date -AsUTC).ToString('yyyy-MM-ddTHH:mm:ssZ')

@"
# Generated by scripts/configure-subscription.ps1 on $Timestamp
# This file is intentionally git-ignored. Re-run the script when the subscription changes.
subscription_id = "$SubscriptionId"
"@ | Set-Content -Path $OutputFile -Encoding UTF8

Write-Info "Wrote subscription ID '$SubscriptionId' to $OutputFile"
