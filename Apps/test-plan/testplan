terraform {
  required_version = ">= 1.9"
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "~> 4.0"
    }
    local = {
      source  = "hashicorp/local"
      version = "~> 2.5"
    }
  }
}

provider "azurerm" {
  features {}
}

# Data source to read the Terraform state file
data "terraform_remote_state" "infrastructure" {
  backend = "local"

  config = {
    path = "${path.root}/../../terraform.tfstate"
  }
}

# Local variable to generate test plan content
locals {
  timestamp = formatdate("YYYY-MM-DD'T'hh:mm:ssZ", timestamp())

  # Extract resources from state
  deployed_resources = try(data.terraform_remote_state.infrastructure.outputs, {})

  test_plan_content = templatefile("${path.module}/templates/testplan.md.tftpl", {
    timestamp           = local.timestamp
    deployed_resources  = local.deployed_resources
  })
}

# Generate test plan document
resource "local_file" "test_plan" {
  filename = "${path.root}/test-plan-${formatdate("YYYY-MM-DD", timestamp())}.md"
  content  = local.test_plan_content

  lifecycle {
    create_before_destroy = true
  }
}

# Output the test plan file path
output "test_plan_file_path" {
  description = "Path to the generated test plan document"
  value       = local_file.test_plan.filename
}

output "test_plan_generated_at" {
  description = "Timestamp when the test plan was generated"
  value       = local.timestamp
}

output "resources_tested" {
  description = "Count of resources included in the test plan"
  value       = length(keys(local.deployed_resources))
}
